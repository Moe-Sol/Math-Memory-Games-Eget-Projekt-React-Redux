[{"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reportWebVitals.js":"3","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\actions\\action.js":"4","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\allreducerar.js":"5","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\secondReducer.js":"6","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\firstReducer.js":"7","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\cardsFactory.js":"8","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\MemoryCards\\MemoryCards.js":"9","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\FormulasCards\\FormulasCards.js":"10","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\ResultsCards\\ResultsCards.js":"11","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\GameFinished\\GameFinished.js":"12","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Start\\Start.js":"13","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Multiplication\\Multiplication.js":"14","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Timer\\Timer.js":"15","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\StorageData\\StorageData.js":"16","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Info\\Info.js":"17"},{"size":782,"mtime":1615927113141,"results":"18","hashOfConfig":"19"},{"size":859,"mtime":1615926945206,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1611734131000,"results":"21","hashOfConfig":"19"},{"size":1315,"mtime":1615506806024,"results":"22","hashOfConfig":"19"},{"size":248,"mtime":1612383406727,"results":"23","hashOfConfig":"19"},{"size":635,"mtime":1615508748227,"results":"24","hashOfConfig":"19"},{"size":2095,"mtime":1615926932315,"results":"25","hashOfConfig":"19"},{"size":2349,"mtime":1615936734509,"results":"26","hashOfConfig":"19"},{"size":5501,"mtime":1615926674063,"results":"27","hashOfConfig":"19"},{"size":1559,"mtime":1615927145877,"results":"28","hashOfConfig":"19"},{"size":1550,"mtime":1615926786269,"results":"29","hashOfConfig":"19"},{"size":3209,"mtime":1615927175554,"results":"30","hashOfConfig":"19"},{"size":1794,"mtime":1615926807910,"results":"31","hashOfConfig":"19"},{"size":2787,"mtime":1615926771452,"results":"32","hashOfConfig":"19"},{"size":1774,"mtime":1615927463478,"results":"33","hashOfConfig":"19"},{"size":2965,"mtime":1615926837863,"results":"34","hashOfConfig":"19"},{"size":1318,"mtime":1615933305654,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1711hv2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\index.js",[],["76","77"],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\App.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reportWebVitals.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\actions\\action.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\allreducerar.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\secondReducer.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\firstReducer.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\reducer\\cardsFactory.js",["78","79","80"],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\MemoryCards\\MemoryCards.js",["81","82","83","84","85","86","87"],"import styles from './memoryCard.module.scss'\r\nimport FormulasCards from '../FormulasCards/FormulasCards';\r\nimport Timer from '../Timer/Timer';\r\nimport ResultsCards from '../ResultsCards/ResultsCards';\r\nimport GameFinished from '../GameFinished/GameFinished';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { sameCards, gameFinished, differentCards } from '../../actions/action';\r\nimport { useHistory } from 'react-router';\r\nimport infoIcon from '../../businessman.svg'\r\nimport Info from '../Info/Info'\r\n\r\nfunction MemoryCards() {\r\n\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch()\r\n\r\n  const [formulaOrResult, setFormulaOrResult] = useState('')\r\n  const [toggleInfo, setToggleInfo] = useState('')\r\n  const [textMessage, setTextMessage] = useState('')\r\n\r\n  const stateFirstReducer = useSelector(state => {\r\n    return state.firstReducer\r\n  })\r\n\r\n  const stateSecondReducer = useSelector(state => {\r\n    return state.secondReducer\r\n  })\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    let firstClassFrontNum = (stateFirstReducer.choosedCardsId[0] * 2)\r\n    let firstClassBacktNum = ((stateFirstReducer.choosedCardsId[0] * 2) + 1)\r\n    let secondClassFronttNum = (stateFirstReducer.choosedCardsId[1] * 2)\r\n    let secondClassBacktNum = ((stateFirstReducer.choosedCardsId[1] * 2) + 1)\r\n    let allSpan = document.querySelectorAll('span')\r\n    if (stateFirstReducer.choosedCardsValue[0] !== stateFirstReducer.choosedCardsValue[1] && stateFirstReducer.choosedCardsValue[1] !== undefined) {\r\n      setTimeout(() => {\r\n        allSpan[firstClassFrontNum].className = `${styles.front} ${styles.flip}`;\r\n        allSpan[firstClassBacktNum].className = `${styles.back}`;\r\n        allSpan[secondClassFronttNum].className = `${styles.front} ${styles.flip}`;\r\n        allSpan[secondClassBacktNum].className =\r\n          `${styles.back}`;\r\n        dispatch(differentCards())\r\n        setFormulaOrResult('')\r\n        setTextMessage('Try again!')\r\n\r\n      }, 1000);\r\n    }\r\n    else if (stateFirstReducer.choosedCardsValue[0] == stateFirstReducer.choosedCardsValue[1] && stateFirstReducer.choosedCardsValue[1] !== undefined) {\r\n      let firstCardId = allSpan[firstClassFrontNum].parentElement;\r\n      let secondCardId = allSpan[secondClassFronttNum].parentElement;\r\n\r\n      firstCardId.style.pointerEvents = 'none'\r\n      secondCardId.style.pointerEvents = 'none'\r\n\r\n      allSpan[firstClassFrontNum].style.color = '#8ffd00';\r\n      allSpan[secondClassFronttNum].style.color = '#8ffd00';\r\n\r\n      setFormulaOrResult('')\r\n      dispatch(sameCards(firstCardId.id, secondCardId.id))\r\n      setTextMessage('Yes! It is right')\r\n    }\r\n\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    if ((stateFirstReducer.allSameCards.length === stateFirstReducer.allCards.length) && (stateFirstReducer.allCards.length !== 0)) {\r\n      dispatch(gameFinished(true))\r\n      setFormulaOrResult('')\r\n      setTextMessage('You win!')\r\n    } else if (stateFirstReducer.allCards.length == 0) {\r\n      history.push('/multiplication')\r\n    }\r\n\r\n\r\n  })\r\n  function toggleInfoFun() {\r\n    setToggleInfo(true)\r\n  }\r\n\r\n  let formularCartText = `? X  ${stateFirstReducer.MultiplicationNumber}` ;\r\n\r\n  return (\r\n    <>\r\n      {stateFirstReducer.gameFinished && stateSecondReducer.checkAccess ? <GameFinished textMessage={setTextMessage}/> :\r\n\r\n        <div className={styles.allCardsContainer}>\r\n          <header>\r\n            <div onClick={toggleInfoFun}>\r\n              <img src={infoIcon}></img>\r\n            </div>\r\n            <h1> Multiplication Memory Game For Kids</h1>\r\n          </header>\r\n          {toggleInfo ? <Info toggle={setToggleInfo} /> : ''}\r\n\r\n          <main>\r\n              <h3 className={styles.textMessage}> {textMessage} </h3>\r\n       \r\n\r\n        \r\n\r\n            <div className={styles.memoryCardsContainer}>\r\n              <section className={styles.memoryCards}>\r\n                {stateFirstReducer.allCards.map((card, index) => {\r\n                  if (index < 12) {\r\n                    return (\r\n                      <FormulasCards theCard={card} key={index} id={index} cartText={formularCartText}\r\n                        setFormulaOrResult={setFormulaOrResult} formulaOrResult={formulaOrResult} textMessage={setTextMessage} />\r\n                    )\r\n                  }\r\n                })}\r\n\r\n              </section>\r\n              <section className={styles.memoryCards}>\r\n                {stateFirstReducer.allCards.map((card, index) => {\r\n                  if (index > 11) {\r\n                    return (\r\n                      <ResultsCards theCard={card} key={index} id={index} cartText='=' setFormulaOrResult={setFormulaOrResult} formulaOrResult={formulaOrResult} textMessage={setTextMessage} />\r\n\r\n                    )\r\n                  }\r\n                })}\r\n\r\n              </section>\r\n\r\n\r\n            </div>\r\n            <div className={styles.timerWrap}>\r\n              <Timer />\r\n            </div>\r\n\r\n            <div className={styles.buttonsWrapper}>\r\n\r\n              <button onClick={() => {\r\n                history.push('/start');\r\n                dispatch(gameFinished(true));\r\n                dispatch(gameFinished(false));\r\n                setFormulaOrResult('')\r\n                setTextMessage('')\r\n              }\r\n\r\n              }> Take me out the game </button>\r\n            </div>\r\n          \r\n          </main>\r\n\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MemoryCards;\r\n","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\FormulasCards\\FormulasCards.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\ResultsCards\\ResultsCards.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\GameFinished\\GameFinished.js",["88"],"import React, { useState } from 'react';\r\nimport styles from './gameFinish.module.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { removeAccess, gameFinished } from '../../actions/action'\r\nimport CardsFactory from '../../reducer/cardsFactory'\r\nimport infoIcon from '../../businessman.svg'\r\nimport Info from '../Info/Info'\r\n\r\nfunction GameFinished(props) {\r\n    const [aktiv, setAktiv] = useState('')\r\n\r\n    const stateSecondReducer = useSelector(state => {\r\n        return state.secondReducer\r\n    })\r\n\r\n    const stateFirstReducer = useSelector(state => {\r\n        return state.firstReducer\r\n    })\r\n    let history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const [toggleInfo, setToggleInfo] = useState('')\r\n\r\n    function saveResult() {\r\n        let result = {\r\n            timesTable: stateFirstReducer.MultiplicationNumber,\r\n            gameTime: stateSecondReducer.gameTime,\r\n            currentTime: stateSecondReducer.currentTime\r\n        }\r\n\r\n        let DataFromStorage = localStorage.getItem('Game Results');\r\n        let oldData = JSON.parse(DataFromStorage);\r\n        if (DataFromStorage) {\r\n            if (oldData[oldData.length - 1].currentTime !== result.currentTime) {\r\n                localStorage.setItem('Game Results', JSON.stringify([...oldData, result]));\r\n                alert(' Your result is saved now')\r\n            }\r\n            else alert(' Your result is already saved!')\r\n        } else localStorage.setItem('Game Results', JSON.stringify([result]));\r\n\r\n    }\r\n\r\n\r\n    function goToStart() {\r\n        history.push('/start');\r\n        dispatch(removeAccess());\r\n        dispatch(gameFinished(false));\r\n\r\n    }\r\n\r\n    function tryAgain() {\r\n        setAktiv(true);\r\n        dispatch(removeAccess());\r\n        dispatch(gameFinished(false));\r\n        props.textMessage('')\r\n    }\r\n\r\n    function toggleInfoFun() {\r\n        setToggleInfo(true)\r\n        props.textMessage('')\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {aktiv ? <CardsFactory /> :\r\n                <div className={styles.container}>\r\n                    <header>\r\n                        <div onClick={toggleInfoFun}>\r\n                            <img src={infoIcon}></img>\r\n                        </div>\r\n                        <h1> Multiplication Memory Game For Kids</h1>\r\n                    </header>\r\n                    {toggleInfo ? <Info toggle={setToggleInfo} /> :\r\n\r\n                        <main>\r\n                            <div>\r\n                                <h1> Well done, You win! and your time is  {stateSecondReducer.gameTime}</h1>\r\n                            </div>\r\n\r\n                            <div className={styles.buttonWrapper}>\r\n                                <button onClick={saveResult}> Save my result for this game!</button>\r\n                                <button onClick={tryAgain}> Try to get better result!</button>\r\n\r\n                                <button onClick={goToStart}> Go to start page</button>\r\n                            </div>\r\n                        </main>\r\n\r\n                    }\r\n                </div>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GameFinished;","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Start\\Start.js",["89"],"import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport styles from './start.module.scss'\r\nimport infoIcon from '../../businessman.svg'\r\nimport Info from '../Info/Info'\r\n\r\nfunction Start() {\r\n    const history = useHistory()\r\n    const [toggleInfo, setToggleInfo] = useState('')\r\n\r\n\r\n    function plus() {\r\n    }\r\n\r\n\r\n    function minus() {\r\n    }\r\n\r\n    function multiplication() {\r\n        history.push('/multiplication')\r\n\r\n\r\n    }\r\n\r\n    function division() {\r\n    }\r\n\r\n\r\n    function toggleInfoFun() {\r\n        setToggleInfo(true)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.startContainer}>\r\n            <header>\r\n                <div onClick={toggleInfoFun}>\r\n                    <img src={infoIcon}></img>\r\n                </div>\r\n                <h1> Math Memory Game For Kids</h1>\r\n\r\n            </header>\r\n            {toggleInfo ? <Info toggle={setToggleInfo} /> :\r\n\r\n                <main>\r\n\r\n                    <section>\r\n\r\n                        <div className={styles.plusSignContainer} onClick={plus}>\r\n                            <h4>  &#43; </h4>\r\n                        </div>\r\n                        <div className={styles.minusSignContainer} onClick={minus}>\r\n                            <h4> &#8722; </h4>\r\n                        </div>\r\n                        <div className={styles.multiplicationSignContainer} onClick={multiplication}>\r\n                            <h4> &#215; </h4>\r\n                        </div>\r\n                        <div className={styles.divisionSignContainer} onClick={division}>\r\n                            <h4> &#247; </h4>\r\n                        </div>\r\n                    </section>\r\n\r\n                </main>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Start;","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Multiplication\\Multiplication.js",["90"],"import React, { useState, useEffect } from 'react';\r\nimport styles from './multiplication.module.scss'\r\nimport { multiplicationNumber } from '../../actions/action';\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router';\r\nimport CardsFactory from '../../reducer/cardsFactory'\r\nimport StorageData from '../StorageData/StorageData';\r\n\r\nimport infoIcon from '../../businessman.svg'\r\n\r\nimport Info from '../Info/Info'\r\n\r\n\r\nfunction Multiplication(props) {\r\n    const [toggleCardsFactory, setToggleCardsFactory] = useState('')\r\n    const [toggleStorageData, setToggleStorageData] = useState('')\r\n    const [toggleInfo, setToggleInfo] = useState('')\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [allNumber, setAllNumber] = useState([])\r\n\r\n    useEffect(() => {\r\n        for (let i = 1; i < 13; i++) {\r\n            setAllNumber(allNumber => [...allNumber, i])\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const number = allNumber.map((number, index) => (\r\n        <div key={index} className={styles.numberContiner} onClick={ () => {\r\n            dispatch(multiplicationNumber(number))\r\n       \r\n            setToggleCardsFactory(true)\r\n\r\n\r\n\r\n        }}>\r\n            <h4>  &#215; {number} </h4>\r\n        </div>))\r\n\r\n    function previousResults() {\r\n\r\n        setToggleStorageData(true)\r\n    }\r\n    function toggleInfoFun() {\r\n        setToggleInfo(true)\r\n    }\r\n    return (\r\n        <div>\r\n            { toggleCardsFactory ? <CardsFactory /> :\r\n                <div className={styles.multiplicationContainer} >\r\n                    <header>\r\n                        <div onClick={toggleInfoFun}>\r\n                            <img src={infoIcon}></img>\r\n                        </div>\r\n\r\n                        <h1> Multiplication Memory Game For Kids</h1>\r\n\r\n                    </header>\r\n\r\n\r\n                    {toggleStorageData ? <StorageData toggle={setToggleStorageData} /> : ''}\r\n\r\n                    {toggleInfo && !toggleStorageData ? <Info toggle={setToggleInfo} /> :\r\n                        <main>\r\n                            <section className={styles.numbersContainer}>\r\n                                {number}\r\n                            </section>\r\n                            <div className={styles.buttonsWrapper}>\r\n                                <button onClick={previousResults}> See your previous results for multiplication\r\n                            </button>\r\n                                <button onClick={() => history.push('/start')}> Go to start page\r\n                            </button>\r\n\r\n                            </div>\r\n                        </main>\r\n\r\n                    }\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Multiplication;","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Timer\\Timer.js",["91"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setTimer } from '../../actions/action'\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Timer() {\r\n    const dispatch = useDispatch()\r\n    const [timerSeconds, setTimerSeconds] = useState(0)\r\n    const [timerMinutes, setTimerMinutes] = useState(0)\r\n    const [timerHours, setTimerHours] = useState(0)\r\n    const [gameTime, setGameTime] = useState('')\r\n    const [intervalId, setIntervalId] = useState('')\r\n\r\n    const finishState = useSelector(state => state.firstReducer.gameFinished);\r\n\r\n    function overTen(x) {\r\n        return (x < 10) ? '0' + x.toString() : x.toString();\r\n    }\r\n\r\n\r\n\r\n    function FunTest() {\r\n        setTimerSeconds((timerS) => timerS + 1)\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        let intervalId = setInterval(FunTest, 1000);\r\n        setIntervalId(intervalId)\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (timerSeconds === 60) {\r\n            setTimerSeconds(0)\r\n            setTimerMinutes((timerM) => timerM + 1)\r\n        }\r\n\r\n        if (timerMinutes === 60) {\r\n            setTimerSeconds(0)\r\n            setTimerMinutes(0)\r\n            setTimerHours((timerH) => timerH + 1)\r\n        }\r\n\r\n\r\n        if (finishState) {\r\n            let currentTime = new Date().toLocaleString('en-US', { hour12: true });\r\n            clearInterval(intervalId)\r\n            dispatch(setTimer(gameTime, currentTime))\r\n\r\n        }\r\n\r\n        setGameTime(overTen(timerHours) + ':' + overTen(timerMinutes) + ':' + overTen(timerSeconds))\r\n\r\n        return function cleanup() {\r\n            setIntervalId('')\r\n        }\r\n\r\n    }, [timerSeconds]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>{gameTime}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\StorageData\\StorageData.js",[],"C:\\Users\\Dell\\Desktop\\programering\\projeckt\\React\\med läraren\\Från Christoffer\\Redux\\memorygame-min\\src\\components\\Info\\Info.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":44,"column":27,"nodeType":"98","messageId":"99","endLine":44,"endColumn":31},{"ruleId":"96","severity":1,"message":"97","line":61,"column":38,"nodeType":"98","messageId":"99","endLine":61,"endColumn":42},{"ruleId":"100","severity":1,"message":"101","line":78,"column":8,"nodeType":"102","endLine":78,"endColumn":10,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":34,"column":3,"nodeType":"105","endLine":34,"endColumn":12,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":53,"column":53,"nodeType":"109","messageId":"99","endLine":53,"endColumn":55},{"ruleId":"100","severity":1,"message":"110","line":71,"column":3,"nodeType":"105","endLine":71,"endColumn":12,"suggestions":"111"},{"ruleId":"107","severity":1,"message":"108","line":76,"column":50,"nodeType":"109","messageId":"99","endLine":76,"endColumn":52},{"ruleId":"112","severity":1,"message":"113","line":95,"column":15,"nodeType":"114","endLine":95,"endColumn":35},{"ruleId":"115","severity":1,"message":"116","line":109,"column":63,"nodeType":"117","messageId":"118","endLine":109,"endColumn":65},{"ruleId":"115","severity":1,"message":"116","line":120,"column":63,"nodeType":"117","messageId":"118","endLine":120,"endColumn":65},{"ruleId":"112","severity":1,"message":"113","line":71,"column":29,"nodeType":"114","endLine":71,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":39,"column":21,"nodeType":"114","endLine":39,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":60,"column":29,"nodeType":"114","endLine":60,"endColumn":49},{"ruleId":"100","severity":1,"message":"119","line":66,"column":8,"nodeType":"102","endLine":66,"endColumn":22,"suggestions":"120"},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-eval","eval can be harmful.","CallExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'MultiplicationNumber' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect contains a call to 'setFormulaOrResult'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [stateFirstReducer.choosedCardsId, stateFirstReducer.choosedCardsValue, dispatch] as a second argument to the useEffect Hook.","Identifier",["124"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect contains a call to 'setFormulaOrResult'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [stateFirstReducer.allSameCards.length, stateFirstReducer.allCards.length, dispatch, history] as a second argument to the useEffect Hook.",["125"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'dispatch', 'finishState', 'gameTime', 'intervalId', 'timerHours', and 'timerMinutes'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setGameTime' needs the current value of 'timerMinutes'.",["126"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [MultiplicationNumber, history]",{"range":"135","text":"136"},"Add dependencies array: [stateFirstReducer.choosedCardsId, stateFirstReducer.choosedCardsValue, dispatch]",{"range":"137","text":"138"},"Add dependencies array: [stateFirstReducer.allSameCards.length, stateFirstReducer.allCards.length, dispatch, history]",{"range":"139","text":"140"},"Update the dependencies array to be: [dispatch, finishState, gameTime, intervalId, timerHours, timerMinutes, timerSeconds]",{"range":"141","text":"142"},[2246,2248],"[MultiplicationNumber, history]",[2726,2726],", [stateFirstReducer.choosedCardsId, stateFirstReducer.choosedCardsValue, dispatch]",[3100,3100],", [stateFirstReducer.allSameCards.length, stateFirstReducer.allCards.length, dispatch, history]",[1642,1656],"[dispatch, finishState, gameTime, intervalId, timerHours, timerMinutes, timerSeconds]"]